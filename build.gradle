plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    //Para obter verificações de preenchimento automático e validação de tipo do seu IDE
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


/**  ATENÇÃO: Nessa aplicação reativa a comunicação com o Banco de Dados é feita através do JDBC,
 o Flyway só é usado para migração/criação de tabelas
 **/
//  Fornece funcionalidade para controlar a versão do seu banco de dados por meio de migrações através do Flyway
    runtimeOnly 'org.flywaydb:flyway-core'

//  Fornece um driver JDBC que permite que o aplicativo se conecte a um banco de dados PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

// Fornece integração Spring com a API JDBC. Faz parte do Spring Framework,
// não deve serconfundido com Spring Data JDBC.
    runtimeOnly 'org.springframework:spring-jdbc'

//    Essse aqui ja veio, observa se da erro
    runtimeOnly 'org.postgresql:r2dbc-postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:r2dbc'
    //fornece utilitários para executar um servidor web simulado.
    testImplementation 'com.squareup.okhttp3:mockwebserver'


}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "17.*"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
    useJUnitPlatform()

}



